---

# 自動deployに関して
# 1. herokuでAPI_KEYを発行(Acctoun settingsより発行可能)
# 2. CircleCIのダッシュボードよりEnvironment Variablesで環境変数を登録
# 3. git push heroku masterのエラー時、TOKENが丸見えになるので標準出力に変えてgrepで消す
#
# CodeClimateのコードカバレッジに関して
# 1. CodeClimateのダッシュボードよりTest coverage用のTEST REPORTER IDをコピー
# 2. CircleCIのダッシュボードよりEnvironment Variablesで環境変数を登録(CC_TEST_REPORTER_ID)
# 3. sedでrspecが吐く.resultset.jsonのパスをdocker-composeのコンテナ外に合わせて相対パスにする
#   - checkout先を/appにするのは失敗した(working_directory:ではだめ)

version: 2

jobs:
  test:
    machine:
      image: circleci/classic:latest
    steps:
      - checkout
      - run:
          name: 最新のdocker-composeを入れる
          command: |
            sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
      - run:
          name: docker-compose build
          command: docker-compose build
      - run:
          name: docker-compose up
          command: docker-compose up -d
      - run:
          name: DBの立ち上がりを待つ
          command: docker-compose exec app dockerize -wait tcp://mariadb:3306 -timeout 1m
      - run:
          name: DBの作成
          command: |
            docker-compose exec app bundle exec rake db:create RAILS_ENV=test
            docker-compose exec app bundle exec rake ext_db:create RAILS_ENV=test
      - run:
          name: テーブル群の作成
          command: |
            docker-compose exec app bundle exec ridgepole -c config/database.yml -E test --apply -f db/Schemafile
            docker-compose exec app bundle exec rake ext_db:ridgepole:apply RAILS_ENV=test
      - run:
          name: CodeClimateのtest-reporterファイルをダウンロードと実行権限の付与
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: rspecとコードカバレッジのアップロード
          command: |
            ./cc-test-reporter before-build
            docker-compose exec app bundle exec rspec
            sudo sed -i -e 's/"\/app\//".\//g' coverage/.resultset.json
            ./cc-test-reporter after-build --coverage-input-type simplecov --exit-code $?
      - run:
          name: cc-test-reporter before-build
          command: ./cc-test-reporter before-build
      - run:
          name: docker-compose down
          command: docker-compose down
  deploy:
    machine:
      image: circleci/classic:latest
    steps:
      - checkout
      - run:
          name: git push heroku master
          command: git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master 2>&1 | grep -v http

workflows:
  version: 2
  my_flows:
    jobs:
      - test:
          filters:
            branches:
              only:
                - master
                - /feature.*/
      - deploy:
          requires:
            - test
          filters:
            branches:
              only: master
